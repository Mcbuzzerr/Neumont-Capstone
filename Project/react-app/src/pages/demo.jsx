import React from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { ThemeProvider } from '@mui/material'
import { ConversationWindow } from '@/components/conversationWindow'
import ClickCounter from '@/components/clicker'
// import MessageComponent from '@/components/chatBox'
import MyGridComponent from '@/components/devPanels'
import BMOComponent from '@/components/BMO'
import { useState } from 'react'
import LightSwitch from '@/components/LightSwitch'
import Editor, { DiffEditor, useMonaco, loader } from '@monaco-editor/react';
import { monaco_spooky, monaco_night_owl } from '@/components/theme'
//https://www.npmjs.com/package/@monaco-editor/react
// I don't think this applies to me, but it might vvv
//NOTE: you should be aware that this may require additional webpack plugins, like monaco-editor-webpack-plugin or it may be impossible to use in apps generated by CRA without ejecting them.

export default function Home() {
    let sample_snippet_2 = "import React from 'react'; \
    \nimport { Box, Typography } from '@mui/material'; \
    \n \
    \nexport const SampleComponent = () => { \
    \n    return ( \
    \n        <Box sx={{ \
    \n            display: 'flex', \
    \n            flexDirection: 'column', \
    \n            justifyContent: 'flex-start', \
    \n            alignItems: 'flex-start', \
    \n            width: '100%', \
    \n            height: '100%', \
    \n        }}> \
    \n            <Typography variant='h1'> \
    \n                Hello World! \
    \n            </Typography> \
    \n        </Box> \
    \n    ); \
    \n} \
    "

    const [messageHistory, setMessageHistory] = useState([]);
    const [isThemeOne, setIsThemeOne] = useState(true);
    const handleMonacoWillMount = (monaco) => {
        monaco.editor.defineTheme('spooky', monaco_spooky)
        monaco.editor.defineTheme('night-owl', monaco_night_owl)
    }

    const handleEditorChange = (value, event) => {
        // Can get the value like this
        console.log(value)

        //Or I can make a ref
        // assign that ref to the editor in a function on mount
        // then us the ref to get the value like this
        // console.log(editorRef.current.getValue())
    }



    return (
        <>
            <MyGridComponent>
                {/* Remember to refactor Conversation Window to have the state kept track of up here ðŸ’­*/}
                <ConversationWindow messages={messageHistory} setMessages={setMessageHistory} />
                {/* <BMOComponent /> */}
                {/* Tabbed Editor example https://codesandbox.io/s/multi-model-editor-kugi6?file=/src/App.js ðŸ’­ */}
                <Editor
                    defaultLanguage="javascript"
                    defaultValue={sample_snippet_2}
                    theme={isThemeOne ? 'spooky' : 'night-owl'}
                    beforeMount={handleMonacoWillMount}
                    onChange={handleEditorChange}
                />
                <LightSwitch setIsOn={setIsThemeOne} isOn={isThemeOne} />
                {/* <ConversationWindow messages={messageHistory} setMessages={setMessageHistory} /> */}
            </MyGridComponent>
        </>
    )
}
