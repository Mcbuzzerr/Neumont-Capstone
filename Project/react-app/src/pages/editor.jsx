import React, { useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { ThemeProvider } from '@mui/material'
import { ConversationWindow } from '@/components/conversationWindow'
import ClickCounter from '@/components/clicker'
// import MessageComponent from '@/components/chatBox'
import BMOComponent from '@/components/BMO'
import { useState } from 'react'
import LightSwitch from '@/components/LightSwitch'
import { PreviewComponent } from '@/components/reactPreview'
import { CodeEditor } from '@/components/codeEditor'
import { ResizableViewsHorizontal, ResizableViewsVertical } from '@/components/resizableViews'
import { SideBar } from '@/components/sideBar'
import { useTheme } from '@mui/material/styles';
import { EditorContextProvider } from '@/contexts/editor-context'

import reactFileTemplate from '@/thatOneStuffFolderUsuallyCalledUtils/reactFileTemplate'

//https://www.npmjs.com/package/@monaco-editor/react
// I don't think this applies to me, but it might vvv
//NOTE: you should be aware that this may require additional webpack plugins, like monaco-editor-webpack-plugin or it may be impossible to use in apps generated by CRA without ejecting them.

export default function Home() {
    const theme = useTheme();
    let sample_snippet_2 = "import React from 'react'; \
    \nimport { Box, Typography } from '@mui/material'; \
    \n \
    \nexport const SampleComponent = () => { \
    \n    return ( \
    \n        <Box sx={{ \
    \n            display: 'flex', \
    \n            flexDirection: 'column', \
    \n            justifyContent: 'flex-start', \
    \n            alignItems: 'flex-start', \
    \n            width: '100%', \
    \n            height: '100%', \
    \n        }}> \
    \n            <Typography variant='h1'> \
    \n                Hello World! \
    \n            </Typography> \
    \n        </Box> \
    \n    ); \
    \n} \
    "
    //Should be gotten from backend
    const initialFiles = reactFileTemplate;

    // Used code from work for reference, my boss said to feel free to use our company code as a learning resource 
    // (Sounds odd and very generous until you learn that he was my highschool teacher before he was my boss, then it's just very generous)
    // I am making sure the code is my own, there are ways of doing things in here that I know aren't my style, and I almost never think of recursion as a solution (I need to get better at this)
    // The main way I made this my own is by making swappable actionMethods. I don't know how this will go, but hopefully it's DRY B)
    const fileTraverse = (directory, splitpath, actionMethod, parameters) => {
        //Get the next chunk of the path
        let path = splitpath.shift();

        if (path == '.') {
            //If it's a dot, thats the same as being at the end
            path = splitpath.shift();
        }

        //If it's the last chunk,
        if (splitpath.length == 0) {
            // add the file to the directory
            return actionMethod(directory, path, ...parameters);
        }
        //If it's not the last chunk, and the path doesn't exist yet,
        let currentDirectory;
        //If the path doesn't exist yet,
        if (!directory[path]) {
            // create it
            directory[path] = {
                directory: {}
            }
        }
        //Then set the currentDirectory to the next directory
        currentDirectory = directory[path].directory;
        //Then recurse
        fileTraverse(currentDirectory, splitpath, actionMethod, parameters);
    }

    const addFile = (directory, path, contents) => {
        directory[path] = {
            file: {
                contents: contents,
            }
        }
        return;
    }

    const addDirectory = (directory, path) => {
        directory[path] = {
            directory: {}
        }
        return;
    }

    const deleteFile = (directory, path) => {
        delete directory[path];
        return;
    }

    const [files, setFiles] = useState(initialFiles);

    const [openFiles, setOpenFiles] = useState([]);

    const [webContainer, setWebContainer] = useState(null);

    const codeEditorFile = (directory, filename) => {
        return ({
            filename: filename,
            contents: directory[filename].file.contents,
        })
    }

    const [messageHistory, setMessageHistory] = useState([{
        role: 'assistant',
        content: "```\n" + sample_snippet_2 + "\n```",
        model: 'gpt-4-0613'
    }]);
    const [sidebarWidth, setSidebarWidth] = React.useState("300px");

    const [projectSettings, setProjectSettings] = useState({});

    const saveProject = () => {
        console.log('Saving project');
        console.log("implement me!")
    }

    const components_2 = [
        {
            slot: 0,
            component: <PreviewComponent />
        },
        {
            slot: 1,
            component: <BMOComponent />
        }
    ]

    const components = [
        // {
        //     slot: 0,
        //     component: <CodeEditor files={[codeEditorFile(files['my-project'].directory, 'example.jsx')]} />
        // },
        {
            slot: 1,
            component: <ResizableViewsVertical items={components_2} />
        }
    ]

    return (
        <EditorContextProvider
            messageHistory={messageHistory}
            setMessageHistory={setMessageHistory}
            files={files}
            setFiles={setFiles}
            openFiles={openFiles}
            setOpenFiles={setOpenFiles}
            webContainer={webContainer}
            setWebContainer={setWebContainer}
            projectSettings={projectSettings}
            setProjectSettings={setProjectSettings}
            saveProject={() => { }}
        >
            <div
                className='pageWrapper' // I might reuse this
                style={{
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'flex-start',
                    alignItems: 'flex-start',
                    minWidth: '100vw',
                    minHeight: '100vh',
                    backgroundColor: theme.palette.background.default,
                    // overflow: 'hidden',
                }}>
                <div
                    className='topBar'
                    style={{
                        width: '100%',
                        maxWidth: '100vw',
                        height: '50px',
                        display: 'flex',
                        flexDirection: 'row',
                        justifyContent: 'flex-start',
                        alignItems: 'center',
                        backgroundColor: theme.palette.background.default,
                    }}
                >

                </div>
                <div
                    style={{
                        display: "flex",
                        flexDirection: "row",
                        justifyContent: "flex-start",
                        alignItems: "flex-start",
                        width: "100%",
                        height: "calc(100vh - 50px)",
                    }}>
                    <SideBar sidebarWidth={sidebarWidth} setSidebarWidth={setSidebarWidth} />
                    <div style={{
                        width: `calc(100% - ${sidebarWidth})`,
                        height: '100%',
                    }}>
                        <ResizableViewsHorizontal items={components} />
                    </div>
                </div>
            </div>
        </EditorContextProvider>
    )
}
